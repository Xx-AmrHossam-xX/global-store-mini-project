{"version":3,"sources":["utils/reducer.ts","utils/context.tsx","components/Nav/Nav.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialState","isOpen","language","user","reducer","state","action","type","UserContext","createContext","dispatch","UserProvider","children","useReducer","Provider","value","Nav","useContext","className","onClick","App","useState","changeUserMode","setChangeUserMode","name","setName","onSubmit","e","trim","length","preventDefault","submit","placeholder","onChange","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAAaA,EAAe,CAAEC,QAAQ,EAAOC,SAAU,KAAMC,KAAM,OAI5D,SAASC,EAASC,EAA4BC,GACnD,OAAQA,EAAOC,MACb,IAAK,SACH,OAAO,2BAAKF,GAAZ,IAAmBJ,QAASI,EAAMJ,SACpC,IAAK,aACH,OAAO,2BAAKI,GAAZ,IAAmBF,KAAMG,EAAOH,OAClC,QACE,OAAOE,G,WCCPG,EAAcC,wBAA2B,CAC7CJ,MAAOL,EACPU,SAAU,kBAAM,QAGZC,EAAe,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,SACtB,EAA4BC,qBAAWT,EAASJ,GAAhD,mBAAQK,EAAR,KAAeK,EAAf,KACA,OACE,cAACF,EAAYM,SAAb,CAAsBC,MAAO,CAAEV,QAAOK,YAAtC,SACGE,K,MCHQI,MAZf,WACE,MAA4BC,qBAAWT,GAA/BH,EAAR,EAAQA,MAAOK,EAAf,EAAeA,SAEf,OACE,sBAAKQ,UAAWb,EAAMJ,OAAS,YAAc,GAA7C,UACE,wBAAQM,KAAK,SAASY,QAAS,kBAAMT,EAAS,CAAEH,KAAM,YAAtD,eAGA,+BAAOF,EAAMH,e,MCyCJkB,MA/Cf,WACE,MAA4BH,qBAAWT,GAA/BH,EAAR,EAAQA,MAAOK,EAAf,EAAeA,SACf,EAA8CW,oBAAS,GAAvD,mBAAQC,EAAR,KAAwBC,EAAxB,KACA,EAA0BF,mBAAS,IAAnC,mBAAQG,EAAR,KAAcC,EAAd,KASA,OACE,sBAAKP,UAAU,MAAf,UACE,+CAAkBb,EAAMF,QACvBmB,EACC,uBAAMI,SAAU,SAAAC,GAAC,OAZvB,SAAiBA,GACXH,EAAKI,OAAOC,OAAS,IACvBnB,EAAS,CAAEH,KAAM,aAAcJ,KAAMqB,IACrCD,GAAkB,GAClBE,EAAQ,KAEVE,EAAEG,iBAMuBC,CAAOJ,IAA5B,UACE,uBACEK,YAAY,sBACZjB,MAAOS,EACPS,SAAU,SAAAN,GAAC,OAAIF,EAAQE,EAAEO,OAAOnB,UAElC,wBAAQR,KAAK,SAASW,UAAU,gBAAhC,uBAKF,wBACEX,KAAK,SACLY,QAAS,kBAAMI,GAAkB,IACjCL,UAAU,qBAHZ,uBAQF,wBACEX,KAAK,SACLY,QAAS,kBAAMT,EAAS,CAAEH,KAAM,YAChCW,UAAU,gBAHZ,oBAOA,cAAC,EAAD,QCpCSiB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.62276888.chunk.js","sourcesContent":["export const initialState = { isOpen: false, language: \"EN\", user: \"Amr\" };\r\n\r\ntype ACTIONTYPE = { type: \"toggle\" } | { type: \"changeUser\"; user: string };\r\n\r\nexport function reducer (state: typeof initialState, action: ACTIONTYPE){\r\n  switch (action.type) {\r\n    case \"toggle\":\r\n      return { ...state, isOpen: !state.isOpen };\r\n    case \"changeUser\":\r\n      return { ...state, user: action.user };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createContext, useReducer } from \"react\";\r\nimport { reducer, initialState } from \"./reducer\";\r\n\r\ninterface InitialStateType {\r\n  isOpen: boolean;\r\n  language: string;\r\n  user: string;\r\n}\r\ninterface IAppContext {\r\n  state: InitialStateType;\r\n  dispatch: React.Dispatch<any>;\r\n}\r\nconst UserContext = createContext<IAppContext>({\r\n  state: initialState,\r\n  dispatch: () => null,\r\n});\r\n\r\nconst UserProvider = ({ children }: { children: JSX.Element }) => {\r\n  const [ state, dispatch ] = useReducer(reducer, initialState);\r\n  return (\r\n    <UserContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\nexport { UserContext, UserProvider };\r\n","import { useContext } from \"react\";\r\n// Context\r\nimport { UserContext } from \"../../utils/context\";\r\n// Scss\r\nimport \"./Nav.scss\";\r\n\r\nfunction Nav (){\r\n  const { state, dispatch } = useContext(UserContext);\r\n\r\n  return (\r\n    <nav className={state.isOpen ? \"show-menu\" : \"\"}>\r\n      <button type=\"button\" onClick={() => dispatch({ type: \"toggle\" })}>\r\n        X\r\n      </button>\r\n      <span>{state.language}</span>\r\n    </nav>\r\n  );\r\n}\r\nexport default Nav;\r\n","import { useState, useContext } from \"react\";\n// Context\nimport { UserContext } from \"./utils/context\";\n// Components\nimport Nav from \"./components/Nav/Nav\";\n// Style\nimport \"./App.scss\";\n\nfunction App (){\n  const { state, dispatch } = useContext(UserContext);\n  const [ changeUserMode, setChangeUserMode ] = useState(false);\n  const [ name, setName ] = useState(\"\");\n  function submit (e: React.FormEvent){\n    if (name.trim().length > 0) {\n      dispatch({ type: \"changeUser\", user: name });\n      setChangeUserMode(false);\n      setName(\"\");\n    }\n    e.preventDefault();\n  }\n  return (\n    <div className=\"App\">\n      <h1>Welcome Back {state.user}</h1>\n      {changeUserMode ? (\n        <form onSubmit={e => submit(e)}>\n          <input\n            placeholder=\"Enter new user name\"\n            value={name}\n            onChange={e => setName(e.target.value)}\n          />\n          <button type=\"submit\" className=\"submit-button\">\n            Submit\n          </button>\n        </form>\n      ) : (\n        <button\n          type=\"button\"\n          onClick={() => setChangeUserMode(true)}\n          className=\"change-user-button\"\n        >\n          Not you ?\n        </button>\n      )}\n      <button\n        type=\"button\"\n        onClick={() => dispatch({ type: \"toggle\" })}\n        className=\"toggle-button\"\n      >\n        Toggle\n      </button>\n      <Nav />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n// Context\nimport { UserProvider } from \"./utils/context\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <UserProvider>\n      <App />\n    </UserProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}